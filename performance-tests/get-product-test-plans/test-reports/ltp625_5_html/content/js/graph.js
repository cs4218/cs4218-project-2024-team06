/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 18.0, "minX": 0.0, "maxY": 7863.0, "series": [{"data": [[0.0, 18.0], [0.1, 18.0], [0.2, 19.0], [0.3, 19.0], [0.4, 19.0], [0.5, 19.0], [0.6, 19.0], [0.7, 19.0], [0.8, 19.0], [0.9, 19.0], [1.0, 19.0], [1.1, 19.0], [1.2, 20.0], [1.3, 20.0], [1.4, 20.0], [1.5, 20.0], [1.6, 20.0], [1.7, 20.0], [1.8, 21.0], [1.9, 21.0], [2.0, 21.0], [2.1, 21.0], [2.2, 21.0], [2.3, 21.0], [2.4, 21.0], [2.5, 21.0], [2.6, 21.0], [2.7, 21.0], [2.8, 21.0], [2.9, 21.0], [3.0, 21.0], [3.1, 22.0], [3.2, 22.0], [3.3, 22.0], [3.4, 22.0], [3.5, 22.0], [3.6, 22.0], [3.7, 22.0], [3.8, 22.0], [3.9, 22.0], [4.0, 26.0], [4.1, 26.0], [4.2, 28.0], [4.3, 28.0], [4.4, 29.0], [4.5, 31.0], [4.6, 31.0], [4.7, 33.0], [4.8, 33.0], [4.9, 34.0], [5.0, 34.0], [5.1, 34.0], [5.2, 37.0], [5.3, 51.0], [5.4, 51.0], [5.5, 55.0], [5.6, 55.0], [5.7, 57.0], [5.8, 57.0], [5.9, 57.0], [6.0, 58.0], [6.1, 58.0], [6.2, 58.0], [6.3, 61.0], [6.4, 61.0], [6.5, 67.0], [6.6, 71.0], [6.7, 71.0], [6.8, 72.0], [6.9, 72.0], [7.0, 72.0], [7.1, 72.0], [7.2, 72.0], [7.3, 73.0], [7.4, 78.0], [7.5, 78.0], [7.6, 80.0], [7.7, 80.0], [7.8, 80.0], [7.9, 671.0], [8.0, 671.0], [8.1, 683.0], [8.2, 789.0], [8.3, 789.0], [8.4, 795.0], [8.5, 797.0], [8.6, 797.0], [8.7, 816.0], [8.8, 816.0], [8.9, 816.0], [9.0, 1156.0], [9.1, 1156.0], [9.2, 1165.0], [9.3, 1175.0], [9.4, 1175.0], [9.5, 1176.0], [9.6, 1176.0], [9.7, 1188.0], [9.8, 1192.0], [9.9, 1192.0], [10.0, 1209.0], [10.1, 1220.0], [10.2, 1220.0], [10.3, 1228.0], [10.4, 1228.0], [10.5, 1236.0], [10.6, 1242.0], [10.7, 1242.0], [10.8, 1242.0], [10.9, 1250.0], [11.0, 1250.0], [11.1, 1256.0], [11.2, 1256.0], [11.3, 1263.0], [11.4, 1269.0], [11.5, 1269.0], [11.6, 1275.0], [11.7, 1291.0], [11.8, 1291.0], [11.9, 1291.0], [12.0, 1291.0], [12.1, 1293.0], [12.2, 1297.0], [12.3, 1297.0], [12.4, 1300.0], [12.5, 1310.0], [12.6, 1310.0], [12.7, 1312.0], [12.8, 1312.0], [12.9, 1322.0], [13.0, 1332.0], [13.1, 1332.0], [13.2, 1337.0], [13.3, 1346.0], [13.4, 1346.0], [13.5, 1347.0], [13.6, 1347.0], [13.7, 1349.0], [13.8, 1357.0], [13.9, 1357.0], [14.0, 1364.0], [14.1, 1371.0], [14.2, 1371.0], [14.3, 1378.0], [14.4, 1378.0], [14.5, 1385.0], [14.6, 1394.0], [14.7, 1394.0], [14.8, 1403.0], [14.9, 1403.0], [15.0, 1403.0], [15.1, 1409.0], [15.2, 1409.0], [15.3, 1421.0], [15.4, 1427.0], [15.5, 1427.0], [15.6, 1433.0], [15.7, 1437.0], [15.8, 1437.0], [15.9, 1444.0], [16.0, 1444.0], [16.1, 1451.0], [16.2, 1457.0], [16.3, 1457.0], [16.4, 1468.0], [16.5, 1468.0], [16.6, 1468.0], [16.7, 1474.0], [16.8, 1474.0], [16.9, 1487.0], [17.0, 1490.0], [17.1, 1490.0], [17.2, 1499.0], [17.3, 1503.0], [17.4, 1503.0], [17.5, 1507.0], [17.6, 1507.0], [17.7, 1515.0], [17.8, 1526.0], [17.9, 1526.0], [18.0, 1542.0], [18.1, 1549.0], [18.2, 1549.0], [18.3, 1552.0], [18.4, 1552.0], [18.5, 1555.0], [18.6, 1560.0], [18.7, 1560.0], [18.8, 1568.0], [18.9, 1576.0], [19.0, 1576.0], [19.1, 1583.0], [19.2, 1583.0], [19.3, 1584.0], [19.4, 1585.0], [19.5, 1585.0], [19.6, 1591.0], [19.7, 1609.0], [19.8, 1609.0], [19.9, 1614.0], [20.0, 1614.0], [20.1, 1615.0], [20.2, 1627.0], [20.3, 1627.0], [20.4, 1627.0], [20.5, 1634.0], [20.6, 1634.0], [20.7, 1648.0], [20.8, 1648.0], [20.9, 1685.0], [21.0, 1691.0], [21.1, 1691.0], [21.2, 2008.0], [21.3, 2067.0], [21.4, 2067.0], [21.5, 2072.0], [21.6, 2072.0], [21.7, 2488.0], [21.8, 2923.0], [21.9, 2923.0], [22.0, 2926.0], [22.1, 2929.0], [22.2, 2929.0], [22.3, 2934.0], [22.4, 2934.0], [22.5, 2937.0], [22.6, 2947.0], [22.7, 2947.0], [22.8, 2953.0], [22.9, 2956.0], [23.0, 2956.0], [23.1, 2968.0], [23.2, 2968.0], [23.3, 2972.0], [23.4, 2978.0], [23.5, 2978.0], [23.6, 2985.0], [23.7, 2990.0], [23.8, 2990.0], [23.9, 2994.0], [24.0, 2994.0], [24.1, 2998.0], [24.2, 3011.0], [24.3, 3011.0], [24.4, 3084.0], [24.5, 3099.0], [24.6, 3099.0], [24.7, 3533.0], [24.8, 3533.0], [24.9, 3539.0], [25.0, 3556.0], [25.1, 3556.0], [25.2, 3564.0], [25.3, 3576.0], [25.4, 3576.0], [25.5, 3592.0], [25.6, 3592.0], [25.7, 3611.0], [25.8, 3617.0], [25.9, 3617.0], [26.0, 3624.0], [26.1, 3629.0], [26.2, 3629.0], [26.3, 3635.0], [26.4, 3635.0], [26.5, 3639.0], [26.6, 3656.0], [26.7, 3656.0], [26.8, 3660.0], [26.9, 3665.0], [27.0, 3665.0], [27.1, 3674.0], [27.2, 3674.0], [27.3, 3677.0], [27.4, 3678.0], [27.5, 3678.0], [27.6, 3690.0], [27.7, 3702.0], [27.8, 3702.0], [27.9, 3708.0], [28.0, 3708.0], [28.1, 3719.0], [28.2, 3725.0], [28.3, 3725.0], [28.4, 3730.0], [28.5, 3744.0], [28.6, 3744.0], [28.7, 3749.0], [28.8, 3749.0], [28.9, 3757.0], [29.0, 3768.0], [29.1, 3768.0], [29.2, 3771.0], [29.3, 3778.0], [29.4, 3778.0], [29.5, 3792.0], [29.6, 3792.0], [29.7, 3801.0], [29.8, 3809.0], [29.9, 3809.0], [30.0, 3818.0], [30.1, 3830.0], [30.2, 3830.0], [30.3, 3830.0], [30.4, 3830.0], [30.5, 3835.0], [30.6, 3856.0], [30.7, 3856.0], [30.8, 3858.0], [30.9, 3874.0], [31.0, 3874.0], [31.1, 3877.0], [31.2, 3877.0], [31.3, 3882.0], [31.4, 3901.0], [31.5, 3901.0], [31.6, 3967.0], [31.7, 4003.0], [31.8, 4003.0], [31.9, 4130.0], [32.0, 4130.0], [32.1, 4139.0], [32.2, 4145.0], [32.3, 4145.0], [32.4, 4152.0], [32.5, 4163.0], [32.6, 4163.0], [32.7, 4169.0], [32.8, 4169.0], [32.9, 4176.0], [33.0, 4177.0], [33.1, 4177.0], [33.2, 4188.0], [33.3, 4193.0], [33.4, 4193.0], [33.5, 4205.0], [33.6, 4208.0], [33.7, 4208.0], [33.8, 4212.0], [33.9, 4212.0], [34.0, 4221.0], [34.1, 4224.0], [34.2, 4224.0], [34.3, 4232.0], [34.4, 4241.0], [34.5, 4241.0], [34.6, 4242.0], [34.7, 4242.0], [34.8, 4254.0], [34.9, 4265.0], [35.0, 4265.0], [35.1, 4269.0], [35.2, 4276.0], [35.3, 4276.0], [35.4, 4281.0], [35.5, 4281.0], [35.6, 4293.0], [35.7, 4295.0], [35.8, 4295.0], [35.9, 4308.0], [36.0, 4310.0], [36.1, 4310.0], [36.2, 4317.0], [36.3, 4317.0], [36.4, 4329.0], [36.5, 4332.0], [36.6, 4332.0], [36.7, 4332.0], [36.8, 4337.0], [36.9, 4337.0], [37.0, 4351.0], [37.1, 4351.0], [37.2, 4365.0], [37.3, 4365.0], [37.4, 4365.0], [37.5, 4374.0], [37.6, 4379.0], [37.7, 4379.0], [37.8, 4386.0], [37.9, 4386.0], [38.0, 4393.0], [38.1, 4400.0], [38.2, 4400.0], [38.3, 4403.0], [38.4, 4415.0], [38.5, 4415.0], [38.6, 4423.0], [38.7, 4423.0], [38.8, 4426.0], [38.9, 4441.0], [39.0, 4441.0], [39.1, 4443.0], [39.2, 4450.0], [39.3, 4450.0], [39.4, 4463.0], [39.5, 4463.0], [39.6, 4490.0], [39.7, 4498.0], [39.8, 4498.0], [39.9, 4529.0], [40.0, 4540.0], [40.1, 4540.0], [40.2, 4824.0], [40.3, 4824.0], [40.4, 4833.0], [40.5, 4838.0], [40.6, 4838.0], [40.7, 4847.0], [40.8, 4855.0], [40.9, 4855.0], [41.0, 4870.0], [41.1, 4870.0], [41.2, 4872.0], [41.3, 4887.0], [41.4, 4887.0], [41.5, 4901.0], [41.6, 4910.0], [41.7, 4910.0], [41.8, 4925.0], [41.9, 4925.0], [42.0, 4960.0], [42.1, 4963.0], [42.2, 4963.0], [42.3, 4980.0], [42.4, 4989.0], [42.5, 4989.0], [42.6, 4995.0], [42.7, 4995.0], [42.8, 4999.0], [42.9, 5001.0], [43.0, 5001.0], [43.1, 5011.0], [43.2, 5016.0], [43.3, 5016.0], [43.4, 5029.0], [43.5, 5029.0], [43.6, 5039.0], [43.7, 5041.0], [43.8, 5041.0], [43.9, 5043.0], [44.0, 5061.0], [44.1, 5061.0], [44.2, 5063.0], [44.3, 5063.0], [44.4, 5076.0], [44.5, 5085.0], [44.6, 5085.0], [44.7, 5097.0], [44.8, 5099.0], [44.9, 5099.0], [45.0, 5113.0], [45.1, 5113.0], [45.2, 5118.0], [45.3, 5450.0], [45.4, 5450.0], [45.5, 5459.0], [45.6, 5464.0], [45.7, 5464.0], [45.8, 5472.0], [45.9, 5472.0], [46.0, 5479.0], [46.1, 5482.0], [46.2, 5482.0], [46.3, 5490.0], [46.4, 5502.0], [46.5, 5502.0], [46.6, 5505.0], [46.7, 5505.0], [46.8, 5514.0], [46.9, 5521.0], [47.0, 5521.0], [47.1, 5527.0], [47.2, 5531.0], [47.3, 5531.0], [47.4, 5540.0], [47.5, 5540.0], [47.6, 5549.0], [47.7, 5558.0], [47.8, 5558.0], [47.9, 5563.0], [48.0, 5570.0], [48.1, 5570.0], [48.2, 5575.0], [48.3, 5575.0], [48.4, 5583.0], [48.5, 5594.0], [48.6, 5594.0], [48.7, 5602.0], [48.8, 5608.0], [48.9, 5608.0], [49.0, 5617.0], [49.1, 5617.0], [49.2, 5631.0], [49.3, 5635.0], [49.4, 5635.0], [49.5, 5637.0], [49.6, 5643.0], [49.7, 5643.0], [49.8, 5650.0], [49.9, 5650.0], [50.0, 5659.0], [50.1, 5666.0], [50.2, 5666.0], [50.3, 5674.0], [50.4, 5678.0], [50.5, 5678.0], [50.6, 5683.0], [50.7, 5683.0], [50.8, 5686.0], [50.9, 5700.0], [51.0, 5700.0], [51.1, 5713.0], [51.2, 5714.0], [51.3, 5714.0], [51.4, 5715.0], [51.5, 5715.0], [51.6, 5729.0], [51.7, 5744.0], [51.8, 5744.0], [51.9, 5747.0], [52.0, 5753.0], [52.1, 5753.0], [52.2, 5756.0], [52.3, 5756.0], [52.4, 5795.0], [52.5, 5813.0], [52.6, 5813.0], [52.7, 5814.0], [52.8, 5829.0], [52.9, 5829.0], [53.0, 5855.0], [53.1, 5855.0], [53.2, 5860.0], [53.3, 5873.0], [53.4, 5873.0], [53.5, 5899.0], [53.6, 5917.0], [53.7, 5917.0], [53.8, 5924.0], [53.9, 5924.0], [54.0, 5960.0], [54.1, 6008.0], [54.2, 6008.0], [54.3, 6019.0], [54.4, 6129.0], [54.5, 6129.0], [54.6, 6135.0], [54.7, 6135.0], [54.8, 6141.0], [54.9, 6151.0], [55.0, 6151.0], [55.1, 6158.0], [55.2, 6164.0], [55.3, 6164.0], [55.4, 6177.0], [55.5, 6177.0], [55.6, 6185.0], [55.7, 6192.0], [55.8, 6192.0], [55.9, 6199.0], [56.0, 6204.0], [56.1, 6204.0], [56.2, 6209.0], [56.3, 6209.0], [56.4, 6214.0], [56.5, 6223.0], [56.6, 6223.0], [56.7, 6235.0], [56.8, 6243.0], [56.9, 6243.0], [57.0, 6250.0], [57.1, 6250.0], [57.2, 6250.0], [57.3, 6260.0], [57.4, 6260.0], [57.5, 6261.0], [57.6, 6261.0], [57.7, 6261.0], [57.8, 6262.0], [57.9, 6262.0], [58.0, 6266.0], [58.1, 6278.0], [58.2, 6278.0], [58.3, 6278.0], [58.4, 6279.0], [58.5, 6279.0], [58.6, 6283.0], [58.7, 6283.0], [58.8, 6291.0], [58.9, 6294.0], [59.0, 6294.0], [59.1, 6295.0], [59.2, 6299.0], [59.3, 6299.0], [59.4, 6301.0], [59.5, 6301.0], [59.6, 6302.0], [59.7, 6307.0], [59.8, 6307.0], [59.9, 6308.0], [60.0, 6309.0], [60.1, 6309.0], [60.2, 6314.0], [60.3, 6314.0], [60.4, 6316.0], [60.5, 6316.0], [60.6, 6316.0], [60.7, 6323.0], [60.8, 6326.0], [60.9, 6326.0], [61.0, 6328.0], [61.1, 6328.0], [61.2, 6328.0], [61.3, 6330.0], [61.4, 6330.0], [61.5, 6336.0], [61.6, 6337.0], [61.7, 6337.0], [61.8, 6340.0], [61.9, 6340.0], [62.0, 6344.0], [62.1, 6344.0], [62.2, 6344.0], [62.3, 6346.0], [62.4, 6351.0], [62.5, 6351.0], [62.6, 6352.0], [62.7, 6352.0], [62.8, 6353.0], [62.9, 6359.0], [63.0, 6359.0], [63.1, 6362.0], [63.2, 6367.0], [63.3, 6367.0], [63.4, 6369.0], [63.5, 6369.0], [63.6, 6370.0], [63.7, 6378.0], [63.8, 6378.0], [63.9, 6379.0], [64.0, 6379.0], [64.1, 6379.0], [64.2, 6382.0], [64.3, 6382.0], [64.4, 6385.0], [64.5, 6387.0], [64.6, 6387.0], [64.7, 6390.0], [64.8, 6390.0], [64.9, 6390.0], [65.0, 6391.0], [65.1, 6391.0], [65.2, 6393.0], [65.3, 6397.0], [65.4, 6397.0], [65.5, 6398.0], [65.6, 6400.0], [65.7, 6400.0], [65.8, 6405.0], [65.9, 6405.0], [66.0, 6405.0], [66.1, 6407.0], [66.2, 6407.0], [66.3, 6411.0], [66.4, 6412.0], [66.5, 6412.0], [66.6, 6415.0], [66.7, 6415.0], [66.8, 6419.0], [66.9, 6421.0], [67.0, 6421.0], [67.1, 6426.0], [67.2, 6427.0], [67.3, 6427.0], [67.4, 6429.0], [67.5, 6429.0], [67.6, 6430.0], [67.7, 6433.0], [67.8, 6433.0], [67.9, 6435.0], [68.0, 6438.0], [68.1, 6438.0], [68.2, 6442.0], [68.3, 6442.0], [68.4, 6447.0], [68.5, 6449.0], [68.6, 6449.0], [68.7, 6452.0], [68.8, 6453.0], [68.9, 6453.0], [69.0, 6459.0], [69.1, 6459.0], [69.2, 6460.0], [69.3, 6461.0], [69.4, 6461.0], [69.5, 6464.0], [69.6, 6465.0], [69.7, 6465.0], [69.8, 6466.0], [69.9, 6466.0], [70.0, 6469.0], [70.1, 6472.0], [70.2, 6472.0], [70.3, 6474.0], [70.4, 6480.0], [70.5, 6480.0], [70.6, 6483.0], [70.7, 6483.0], [70.8, 6486.0], [70.9, 6487.0], [71.0, 6487.0], [71.1, 6488.0], [71.2, 6491.0], [71.3, 6491.0], [71.4, 6492.0], [71.5, 6492.0], [71.6, 6495.0], [71.7, 6499.0], [71.8, 6499.0], [71.9, 6500.0], [72.0, 6501.0], [72.1, 6501.0], [72.2, 6503.0], [72.3, 6503.0], [72.4, 6503.0], [72.5, 6511.0], [72.6, 6511.0], [72.7, 6517.0], [72.8, 6518.0], [72.9, 6518.0], [73.0, 6525.0], [73.1, 6525.0], [73.2, 6525.0], [73.3, 6526.0], [73.4, 6526.0], [73.5, 6528.0], [73.6, 6531.0], [73.7, 6531.0], [73.8, 6540.0], [73.9, 6540.0], [74.0, 6541.0], [74.1, 6542.0], [74.2, 6542.0], [74.3, 6555.0], [74.4, 6557.0], [74.5, 6557.0], [74.6, 6558.0], [74.7, 6558.0], [74.8, 6563.0], [74.9, 6564.0], [75.0, 6564.0], [75.1, 6566.0], [75.2, 6581.0], [75.3, 6581.0], [75.4, 6582.0], [75.5, 6582.0], [75.6, 6583.0], [75.7, 6589.0], [75.8, 6589.0], [75.9, 6591.0], [76.0, 6600.0], [76.1, 6600.0], [76.2, 6600.0], [76.3, 6600.0], [76.4, 6601.0], [76.5, 6604.0], [76.6, 6604.0], [76.7, 6606.0], [76.8, 6612.0], [76.9, 6612.0], [77.0, 6620.0], [77.1, 6620.0], [77.2, 6624.0], [77.3, 6625.0], [77.4, 6625.0], [77.5, 6633.0], [77.6, 6636.0], [77.7, 6636.0], [77.8, 6644.0], [77.9, 6644.0], [78.0, 6645.0], [78.1, 6646.0], [78.2, 6646.0], [78.3, 6646.0], [78.4, 6651.0], [78.5, 6651.0], [78.6, 6652.0], [78.7, 6652.0], [78.8, 6659.0], [78.9, 6669.0], [79.0, 6669.0], [79.1, 6670.0], [79.2, 6670.0], [79.3, 6670.0], [79.4, 6674.0], [79.5, 6674.0], [79.6, 6676.0], [79.7, 6683.0], [79.8, 6683.0], [79.9, 6690.0], [80.0, 6690.0], [80.1, 6690.0], [80.2, 6690.0], [80.3, 6690.0], [80.4, 6697.0], [80.5, 6698.0], [80.6, 6698.0], [80.7, 6702.0], [80.8, 6707.0], [80.9, 6707.0], [81.0, 6712.0], [81.1, 6712.0], [81.2, 6718.0], [81.3, 6718.0], [81.4, 6718.0], [81.5, 6721.0], [81.6, 6732.0], [81.7, 6732.0], [81.8, 6734.0], [81.9, 6734.0], [82.0, 6736.0], [82.1, 6741.0], [82.2, 6741.0], [82.3, 6744.0], [82.4, 6749.0], [82.5, 6749.0], [82.6, 6749.0], [82.7, 6749.0], [82.8, 6750.0], [82.9, 6755.0], [83.0, 6755.0], [83.1, 6758.0], [83.2, 6764.0], [83.3, 6764.0], [83.4, 6765.0], [83.5, 6765.0], [83.6, 6773.0], [83.7, 6776.0], [83.8, 6776.0], [83.9, 6777.0], [84.0, 6781.0], [84.1, 6781.0], [84.2, 6784.0], [84.3, 6784.0], [84.4, 6791.0], [84.5, 6797.0], [84.6, 6797.0], [84.7, 6805.0], [84.8, 6807.0], [84.9, 6807.0], [85.0, 6807.0], [85.1, 6807.0], [85.2, 6814.0], [85.3, 6815.0], [85.4, 6815.0], [85.5, 6818.0], [85.6, 6823.0], [85.7, 6823.0], [85.8, 6828.0], [85.9, 6828.0], [86.0, 6832.0], [86.1, 6836.0], [86.2, 6836.0], [86.3, 6838.0], [86.4, 6844.0], [86.5, 6844.0], [86.6, 6851.0], [86.7, 6851.0], [86.8, 6852.0], [86.9, 6853.0], [87.0, 6853.0], [87.1, 6855.0], [87.2, 6858.0], [87.3, 6858.0], [87.4, 6865.0], [87.5, 6865.0], [87.6, 6866.0], [87.7, 6866.0], [87.8, 6866.0], [87.9, 6871.0], [88.0, 6876.0], [88.1, 6876.0], [88.2, 6881.0], [88.3, 6881.0], [88.4, 6892.0], [88.5, 6892.0], [88.6, 6892.0], [88.7, 6895.0], [88.8, 6895.0], [88.9, 6895.0], [89.0, 6901.0], [89.1, 6901.0], [89.2, 6903.0], [89.3, 6907.0], [89.4, 6907.0], [89.5, 6912.0], [89.6, 6918.0], [89.7, 6918.0], [89.8, 6927.0], [89.9, 6927.0], [90.0, 6929.0], [90.1, 6933.0], [90.2, 6933.0], [90.3, 6935.0], [90.4, 6939.0], [90.5, 6939.0], [90.6, 6945.0], [90.7, 6945.0], [90.8, 6946.0], [90.9, 6949.0], [91.0, 6949.0], [91.1, 6954.0], [91.2, 6965.0], [91.3, 6965.0], [91.4, 6967.0], [91.5, 6967.0], [91.6, 6976.0], [91.7, 6979.0], [91.8, 6979.0], [91.9, 6988.0], [92.0, 6992.0], [92.1, 6992.0], [92.2, 6996.0], [92.3, 6996.0], [92.4, 6998.0], [92.5, 7000.0], [92.6, 7000.0], [92.7, 7002.0], [92.8, 7003.0], [92.9, 7003.0], [93.0, 7010.0], [93.1, 7010.0], [93.2, 7014.0], [93.3, 7020.0], [93.4, 7020.0], [93.5, 7020.0], [93.6, 7028.0], [93.7, 7028.0], [93.8, 7033.0], [93.9, 7033.0], [94.0, 7039.0], [94.1, 7040.0], [94.2, 7040.0], [94.3, 7042.0], [94.4, 7050.0], [94.5, 7050.0], [94.6, 7052.0], [94.7, 7052.0], [94.8, 7055.0], [94.9, 7057.0], [95.0, 7057.0], [95.1, 7062.0], [95.2, 7062.0], [95.3, 7062.0], [95.4, 7068.0], [95.5, 7068.0], [95.6, 7070.0], [95.7, 7086.0], [95.8, 7086.0], [95.9, 7089.0], [96.0, 7093.0], [96.1, 7093.0], [96.2, 7096.0], [96.3, 7096.0], [96.4, 7122.0], [96.5, 7132.0], [96.6, 7132.0], [96.7, 7132.0], [96.8, 7138.0], [96.9, 7138.0], [97.0, 7143.0], [97.1, 7143.0], [97.2, 7145.0], [97.3, 7153.0], [97.4, 7153.0], [97.5, 7162.0], [97.6, 7169.0], [97.7, 7169.0], [97.8, 7181.0], [97.9, 7181.0], [98.0, 7190.0], [98.1, 7200.0], [98.2, 7200.0], [98.3, 7204.0], [98.4, 7211.0], [98.5, 7211.0], [98.6, 7249.0], [98.7, 7249.0], [98.8, 7327.0], [98.9, 7352.0], [99.0, 7352.0], [99.1, 7495.0], [99.2, 7617.0], [99.3, 7617.0], [99.4, 7743.0], [99.5, 7743.0], [99.6, 7792.0], [99.7, 7819.0], [99.8, 7819.0], [99.9, 7863.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 49.0, "series": [{"data": [[0.0, 49.0], [600.0, 2.0], [700.0, 3.0], [800.0, 2.0], [1100.0, 6.0], [1200.0, 15.0], [1300.0, 15.0], [1400.0, 16.0], [1500.0, 15.0], [1600.0, 9.0], [2000.0, 3.0], [2400.0, 1.0], [2900.0, 15.0], [3000.0, 3.0], [3500.0, 6.0], [3700.0, 12.0], [3600.0, 13.0], [3800.0, 11.0], [3900.0, 2.0], [4000.0, 1.0], [4300.0, 14.0], [4200.0, 15.0], [4100.0, 10.0], [4400.0, 11.0], [4500.0, 2.0], [4800.0, 8.0], [4900.0, 9.0], [5000.0, 13.0], [5100.0, 2.0], [5600.0, 14.0], [5500.0, 14.0], [5400.0, 7.0], [5800.0, 7.0], [5700.0, 10.0], [5900.0, 3.0], [6000.0, 2.0], [6100.0, 10.0], [6300.0, 39.0], [6200.0, 21.0], [6400.0, 39.0], [6500.0, 26.0], [6600.0, 29.0], [6900.0, 22.0], [6800.0, 27.0], [6700.0, 25.0], [7000.0, 24.0], [7100.0, 11.0], [7300.0, 2.0], [7200.0, 4.0], [7400.0, 1.0], [7600.0, 1.0], [7700.0, 2.0], [7800.0, 2.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 7800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 49.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 517.0, "series": [{"data": [[0.0, 49.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 59.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 517.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 213.5311999999997, "minX": 1.73112948E12, "maxY": 213.5311999999997, "series": [{"data": [[1.73112948E12, 213.5311999999997]], "isOverall": false, "label": "625 User Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73112948E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 80.0, "minX": 2.0, "maxY": 7792.0, "series": [{"data": [[2.0, 7556.0], [3.0, 7190.0], [4.0, 3609.5], [5.0, 356.17391304347825], [6.0, 917.25], [7.0, 1813.25], [8.0, 3609.0], [9.0, 3627.5], [10.0, 2441.0], [11.0, 1247.3333333333333], [12.0, 80.0], [13.0, 4803.0], [15.0, 7122.0], [16.0, 7486.0], [17.0, 1106.6666666666667], [18.0, 6291.0], [19.0, 6326.0], [20.0, 6278.0], [21.0, 6299.0], [22.0, 6308.0], [23.0, 6362.0], [24.0, 6379.0], [25.0, 6385.0], [26.0, 6353.0], [27.0, 6314.0], [28.0, 6344.0], [29.0, 6369.0], [30.0, 6337.0], [31.0, 6328.0], [33.0, 7138.0], [32.0, 6393.0], [35.0, 6651.0], [34.0, 6591.0], [37.0, 6447.0], [36.0, 6624.0], [39.0, 6464.0], [38.0, 6472.0], [41.0, 6531.0], [40.0, 6581.0], [43.0, 6501.0], [42.0, 6540.0], [45.0, 6483.0], [44.0, 6415.0], [47.0, 7249.0], [46.0, 6419.0], [49.0, 6427.0], [48.0, 6555.0], [51.0, 6433.0], [50.0, 6625.0], [53.0, 6449.0], [52.0, 6390.0], [55.0, 6486.0], [54.0, 6397.0], [57.0, 6500.0], [56.0, 6469.0], [59.0, 6518.0], [58.0, 6558.0], [61.0, 6583.0], [60.0, 6541.0], [63.0, 6600.0], [62.0, 6604.0], [67.0, 6744.0], [66.0, 6563.0], [65.0, 6690.0], [64.0, 6636.0], [71.0, 6732.0], [70.0, 6645.0], [69.0, 6718.0], [68.0, 6670.0], [75.0, 6764.0], [74.0, 6707.0], [73.0, 6659.0], [72.0, 6749.0], [79.0, 6718.0], [78.0, 6755.0], [77.0, 6698.0], [76.0, 6690.0], [83.0, 6823.0], [82.0, 6832.0], [81.0, 6646.0], [80.0, 6670.0], [87.0, 2735.3333333333335], [86.0, 7089.0], [85.0, 6805.0], [84.0, 6814.0], [91.0, 6858.0], [90.0, 6866.0], [89.0, 6836.0], [88.0, 6892.0], [95.0, 6765.0], [94.0, 6784.0], [93.0, 7042.0], [92.0, 6777.0], [99.0, 7057.0], [98.0, 7020.0], [97.0, 6892.0], [96.0, 6791.0], [103.0, 4326.0], [102.0, 2869.6666666666665], [101.0, 7002.0], [100.0, 6979.0], [104.0, 3939.0], [105.0, 3963.5], [106.0, 6965.0], [111.0, 6954.0], [110.0, 6895.0], [109.0, 6949.0], [108.0, 7007.5], [115.0, 7792.0], [114.0, 6865.0], [113.0, 6901.0], [112.0, 6855.0], [119.0, 7068.0], [118.0, 6935.0], [117.0, 6903.0], [116.0, 7033.0], [123.0, 6998.0], [120.0, 7040.0], [127.0, 7327.0], [126.0, 6278.0], [125.0, 6988.5], [124.0, 6917.0], [135.0, 6316.0], [134.0, 6340.0], [133.0, 6301.0], [132.0, 6309.0], [131.0, 6266.0], [130.0, 6294.0], [129.0, 6262.0], [128.0, 6250.0], [143.0, 6407.0], [142.0, 6367.0], [141.0, 6352.0], [140.0, 7352.0], [139.0, 6330.0], [138.0, 6346.0], [137.0, 6323.0], [136.0, 6379.0], [151.0, 2938.666666666667], [150.0, 3801.5], [149.0, 3821.5], [148.0, 3793.5], [147.0, 6430.0], [146.0, 6390.0], [145.0, 6400.0], [144.0, 6387.0], [159.0, 3012.0], [158.0, 4089.5], [157.0, 3850.5], [156.0, 3851.0], [155.0, 3839.5], [154.0, 3825.5], [153.0, 4105.0], [152.0, 3806.5], [167.0, 3930.5], [166.0, 3949.5], [165.0, 3047.0], [164.0, 3972.0], [163.0, 3935.0], [162.0, 3055.0], [161.0, 3876.5], [160.0, 3872.5], [175.0, 4863.0], [174.0, 1364.0], [173.0, 3981.5], [172.0, 2642.5], [171.0, 3959.5], [170.0, 3084.666666666667], [169.0, 3966.5], [168.0, 3993.0], [183.0, 4090.0], [182.0, 2743.5], [180.0, 3152.0], [179.0, 4014.5], [178.0, 3972.0], [177.0, 4841.0], [176.0, 1403.0], [181.0, 6652.0], [191.0, 3256.333333333333], [190.0, 4140.5], [189.0, 4116.5], [188.0, 4151.0], [187.0, 3212.333333333333], [186.0, 4082.5], [185.0, 4086.0], [184.0, 4046.5], [199.0, 5092.333333333333], [198.0, 1557.5], [197.0, 4184.0], [196.0, 4016.0], [195.0, 4133.5], [194.0, 3283.333333333333], [193.0, 4169.5], [192.0, 4142.5], [207.0, 4226.0], [206.0, 3366.0], [205.0, 4221.5], [204.0, 4227.5], [203.0, 4193.5], [202.0, 4186.0], [201.0, 3003.75], [200.0, 3467.0], [208.0, 4240.0], [215.0, 6876.0], [214.0, 6918.0], [213.0, 7096.0], [212.0, 7050.0], [211.0, 6945.0], [210.0, 6912.0], [209.0, 7093.0], [223.0, 6946.0], [222.0, 6866.0], [221.0, 7020.0], [220.0, 6851.0], [219.0, 7000.0], [218.0, 7020.0], [216.0, 7039.0], [231.0, 7003.0], [230.0, 7062.0], [229.0, 7028.0], [228.0, 7070.0], [227.0, 6976.0], [226.0, 7055.0], [225.0, 6933.0], [224.0, 6881.0], [239.0, 6141.0], [238.0, 6135.0], [237.0, 6129.0], [236.0, 6151.0], [235.0, 6008.0], [234.0, 5960.0], [233.0, 6939.0], [232.0, 6992.0], [247.0, 6235.0], [246.0, 6164.0], [245.0, 6204.0], [244.0, 6185.0], [243.0, 6158.0], [242.0, 6192.0], [241.0, 7014.0], [240.0, 6177.0], [255.0, 4134.5], [254.0, 6261.0], [253.0, 6260.0], [252.0, 6223.0], [251.0, 6250.0], [250.0, 6209.0], [249.0, 6243.0], [248.0, 6199.0], [270.0, 6391.0], [257.0, 4351.0], [256.0, 6279.0], [259.0, 6316.0], [258.0, 6302.0], [263.0, 6370.0], [262.0, 6378.0], [261.0, 6283.0], [260.0, 6307.0], [271.0, 6398.0], [269.0, 6382.0], [268.0, 6344.0], [267.0, 6359.0], [266.0, 6351.0], [265.0, 6336.0], [264.0, 6328.0], [287.0, 6452.333333333333], [285.0, 6429.0], [275.0, 6499.0], [274.0, 6460.0], [273.0, 6492.0], [272.0, 6526.0], [283.0, 6503.0], [282.0, 6435.0], [281.0, 6480.0], [280.0, 6453.0], [279.0, 6426.0], [278.0, 6466.0], [277.0, 6411.0], [276.0, 6405.0], [302.0, 5549.0], [303.0, 5563.0], [301.0, 5558.0], [300.0, 5527.0], [299.0, 5631.0], [298.0, 5505.0], [297.0, 5521.0], [296.0, 5514.0], [295.0, 5482.0], [289.0, 5450.0], [288.0, 5459.0], [291.0, 5502.0], [290.0, 5472.0], [294.0, 5490.0], [293.0, 5464.0], [292.0, 5479.0], [318.0, 5666.0], [319.0, 5674.0], [317.0, 5643.0], [316.0, 5650.0], [315.0, 5659.0], [314.0, 5637.0], [313.0, 5575.0], [312.0, 5583.0], [311.0, 5608.0], [305.0, 5531.0], [304.0, 5540.0], [307.0, 5602.0], [306.0, 5570.0], [310.0, 5635.0], [309.0, 5617.0], [308.0, 5594.0], [333.0, 5829.0], [334.0, 5860.0], [332.0, 5855.0], [323.0, 5678.0], [322.0, 5744.0], [321.0, 5899.0], [320.0, 5714.0], [331.0, 5873.0], [330.0, 5713.0], [329.0, 5753.0], [328.0, 5729.0], [327.0, 5747.0], [326.0, 6019.0], [325.0, 5700.0], [324.0, 5686.0], [351.0, 4854.0], [350.0, 5163.333333333333], [346.0, 4999.0], [344.0, 4892.0], [342.0, 4980.0], [341.0, 4833.0], [340.0, 5884.666666666667], [338.0, 5795.0], [337.0, 5699.0], [366.0, 5113.0], [367.0, 4004.0], [365.0, 5061.0], [364.0, 5118.0], [363.0, 5097.0], [362.0, 5016.0], [361.0, 4995.0], [360.0, 5001.0], [359.0, 4989.0], [353.0, 4905.5], [355.0, 5039.0], [354.0, 4909.0], [358.0, 5029.0], [357.0, 5041.0], [356.0, 5011.0], [371.0, 3990.0], [377.0, 3562.0], [378.0, 3381.6666666666665], [379.0, 4145.0], [376.0, 3416.3333333333335], [383.0, 4205.0], [382.0, 4188.0], [381.0, 4177.0], [380.0, 4152.0], [375.0, 3623.5], [374.0, 3940.5], [373.0, 3610.0], [372.0, 3948.2], [370.0, 4023.0], [369.0, 3646.3333333333335], [368.0, 2972.0], [398.0, 4293.0], [399.0, 4295.0], [397.0, 4276.0], [396.0, 4269.0], [395.0, 4241.0], [394.0, 4254.0], [393.0, 4281.0], [392.0, 4224.0], [391.0, 4232.0], [385.0, 4176.0], [384.0, 4193.0], [387.0, 4212.0], [386.0, 4208.0], [390.0, 4265.0], [389.0, 4242.0], [388.0, 4221.0], [414.0, 4490.0], [415.0, 4529.0], [413.0, 4443.0], [412.0, 4415.0], [411.0, 4351.0], [410.0, 4365.0], [409.0, 4400.0], [408.0, 4379.0], [407.0, 4386.0], [401.0, 4329.0], [400.0, 4308.0], [403.0, 4332.0], [402.0, 4332.0], [406.0, 4365.0], [405.0, 4317.0], [404.0, 4310.0], [428.0, 3544.5], [431.0, 3592.0], [430.0, 3611.0], [429.0, 3539.0], [426.0, 4426.5], [423.0, 4426.5], [420.0, 4540.0], [419.0, 4426.0], [418.0, 4423.0], [417.0, 4337.0], [416.0, 4463.0], [446.0, 3708.0], [447.0, 3730.0], [445.0, 3719.0], [444.0, 3678.0], [443.0, 3677.0], [442.0, 3674.0], [441.0, 3639.0], [440.0, 3665.0], [439.0, 3635.0], [433.0, 3576.0], [432.0, 3617.0], [435.0, 3564.0], [434.0, 3624.0], [438.0, 3656.0], [437.0, 3660.0], [436.0, 3629.0], [462.0, 4003.0], [463.0, 3901.0], [461.0, 3778.0], [460.0, 3830.0], [459.0, 3771.0], [458.0, 3792.0], [457.0, 3809.0], [456.0, 3757.0], [455.0, 3744.0], [449.0, 3702.0], [448.0, 3690.0], [451.0, 3801.0], [450.0, 3725.0], [454.0, 3749.0], [453.0, 3768.0], [452.0, 3818.0], [471.0, 3830.0], [470.0, 3870.0], [468.0, 3877.0], [467.0, 3967.0], [466.0, 3835.0], [465.0, 3874.0], [464.0, 3856.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[213.5296000000001, 4721.020799999998]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 471.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1479.1666666666667, "minX": 1.73112948E12, "maxY": 24145.833333333332, "series": [{"data": [[1.73112948E12, 24145.833333333332]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.73112948E12, 1479.1666666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73112948E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 4721.020799999998, "minX": 1.73112948E12, "maxY": 4721.020799999998, "series": [{"data": [[1.73112948E12, 4721.020799999998]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73112948E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 4720.9663999999975, "minX": 1.73112948E12, "maxY": 4720.9663999999975, "series": [{"data": [[1.73112948E12, 4720.9663999999975]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73112948E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1.022400000000001, "minX": 1.73112948E12, "maxY": 1.022400000000001, "series": [{"data": [[1.73112948E12, 1.022400000000001]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73112948E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 18.0, "minX": 1.73112948E12, "maxY": 7863.0, "series": [{"data": [[1.73112948E12, 7863.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.73112948E12, 18.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.73112948E12, 6930.6]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.73112948E12, 7457.8200000000015]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.73112948E12, 5659.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.73112948E12, 7060.5]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73112948E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 22.0, "minX": 2.0, "maxY": 7185.5, "series": [{"data": [[2.0, 2248.0], [32.0, 5006.0], [16.0, 7185.5], [18.0, 2970.0], [78.0, 1415.0], [45.0, 3725.0], [49.0, 22.0], [53.0, 5637.0], [54.0, 5442.5], [108.0, 6675.0], [109.0, 6698.0], [7.0, 795.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 109.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 22.0, "minX": 2.0, "maxY": 7185.5, "series": [{"data": [[2.0, 2248.0], [32.0, 5006.0], [16.0, 7185.5], [18.0, 2970.0], [78.0, 1415.0], [45.0, 3725.0], [49.0, 22.0], [53.0, 5637.0], [54.0, 5442.5], [108.0, 6675.0], [109.0, 6698.0], [7.0, 795.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 109.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 10.416666666666666, "minX": 1.73112948E12, "maxY": 10.416666666666666, "series": [{"data": [[1.73112948E12, 10.416666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73112948E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 10.416666666666666, "minX": 1.73112948E12, "maxY": 10.416666666666666, "series": [{"data": [[1.73112948E12, 10.416666666666666]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73112948E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 10.416666666666666, "minX": 1.73112948E12, "maxY": 10.416666666666666, "series": [{"data": [[1.73112948E12, 10.416666666666666]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73112948E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 10.416666666666666, "minX": 1.73112948E12, "maxY": 10.416666666666666, "series": [{"data": [[1.73112948E12, 10.416666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73112948E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

